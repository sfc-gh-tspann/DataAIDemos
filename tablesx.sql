
CREATE TABLE ZIPCODES (
   state_fips              STRING,
   state                   STRING,
   state_abbr              STRING,
   zipcode                 STRING,
   county                  STRING,
   city                    STRING
);

 SELECT GET_DDL('DATABASE', 'DEMO');

create or replace database DEMO COMMENT='demo';

create or replace schema DEMO;

create or replace TABLE ADOCS (
	TITLE VARCHAR(16777216),
	DESCRIPTION VARCHAR(16777216),
	PUBDATE VARCHAR(16777216),
	DOCID VARCHAR(16777216) NOT NULL,
	DOCVEC ARRAY
);
create or replace TABLE ADSB (
	SEEN_POS VARCHAR(250),
	FLIGHT VARCHAR(250),
	ADSBNOW VARCHAR(250),
	LATITUDE VARCHAR(250),
	NIC VARCHAR(250),
	EMERGENCY VARCHAR(250),
	UUID VARCHAR(250),
	SEEN VARCHAR(250),
	GEOMRATE VARCHAR(250),
	NAVHEADING VARCHAR(250),
	SILTYPE VARCHAR(250),
	SQUAWK VARCHAR(250),
	GVA VARCHAR(250),
	BARORATE VARCHAR(250),
	NOWTS VARCHAR(250),
	SIL VARCHAR(250),
	TRACK VARCHAR(250),
	LONGITUDE VARCHAR(250),
	MLAT VARCHAR(250),
	NAVIGATIONACCURACYFORVELOCITY VARCHAR(250),
	RSSI VARCHAR(250),
	NAVICATIONINTEGRITYFORBAROMETRICALTITUDE VARCHAR(250),
	NAVQNH VARCHAR(250),
	GS VARCHAR(250),
	DATAVERSION VARCHAR(250),
	SDA VARCHAR(250),
	RC VARCHAR(250),
	NAVIGATIONACCURACYFORPOSITION VARCHAR(250),
	TISB VARCHAR(250),
	NAVALTITUDEMCP VARCHAR(250),
	PLANEID VARCHAR(250),
	MESSAGES VARCHAR(250),
	CATEGORY VARCHAR(250),
	ALTBARO VARCHAR(250),
	TS VARCHAR(250),
	ALTGEOM VARCHAR(250)
);
create or replace TABLE AIRQUALITY (
	DATEOBSERVED VARCHAR(16777216),
	HOUROBSERVED VARCHAR(16777216),
	LOCALTIMEZONE VARCHAR(16777216),
	REPORTINGAREA VARCHAR(16777216),
	STATECODE VARCHAR(16777216),
	LATITUDE NUMBER(7,3),
	LONGITUDE NUMBER(7,3),
	PARAMETERNAME VARCHAR(16777216),
	AQI NUMBER(2,0),
	CATEGORYNUMBER VARCHAR(1),
	CATEGORYNAME VARCHAR(16777216),
	TS VARCHAR(16777216),
	UUID VARCHAR(16777216)
);
create or replace TABLE AIRQUALITYFORECAST (
	DATEISSUE VARCHAR(16777216),
	DATEFORECAST VARCHAR(16777216),
	REPORTINGAREA VARCHAR(16777216),
	STATECODE VARCHAR(16777216),
	LATITUDE NUMBER(7,3),
	LONGITUDE NUMBER(7,3),
	PARAMETERNAME VARCHAR(16777216),
	AQI NUMBER(38,0),
	CATEGORYNUMBER VARCHAR(1),
	CATEGORYNAME VARCHAR(16777216),
	ACTIONDAY VARCHAR(16777216),
	DISCUSSION VARCHAR(5000),
	TS VARCHAR(16777216),
	UUID VARCHAR(16777216)
);
create or replace TABLE DOCS (
	TITLE VARCHAR(16777216),
	DESCRIPTION VARCHAR(16777216),
	PUBDATE VARCHAR(16777216),
	DOCID VARCHAR(16777216) NOT NULL,
	DOCVEC VECTOR(FLOAT, 768),
	primary key (DOCID)
);
create or replace TABLE DOCS_CHUNKS_TABLE (
	RELATIVE_PATH VARCHAR(16777216),
	SIZE NUMBER(38,0),
	FILE_URL VARCHAR(16777216),
	SCOPED_FILE_URL VARCHAR(16777216),
	CHUNK VARCHAR(16777216),
	CATEGORY VARCHAR(16777216)
);
create or replace TABLE GROCERY (
	ITEM_DESCRIPTION VARCHAR(16777216),
	ITEM VARCHAR(16777216),
	ITEM_HEIGHT VARCHAR(16777216),
	PRODUCT_ID VARCHAR(16777216),
	DISPLAY_IMAGE VARCHAR(16777216),
	ITEM_SIZE VARCHAR(16777216),
	UPC VARCHAR(16777216),
	BRAND_NAME VARCHAR(16777216),
	ORIGIN_STORE VARCHAR(16777216),
	UUID VARCHAR(16777216),
	TEMPERATURE_INDICATOR VARCHAR(16777216),
	UPDATE_DATE VARCHAR(16777216),
	ITEM_DEPTH VARCHAR(16777216),
	ITEM_ID VARCHAR(16777216),
	PRICE VARCHAR(16777216),
	TPR VARCHAR(16777216),
	ITEM_HEATED_INDICATOR VARCHAR(16777216),
	CATEGORY VARCHAR(16777216),
	COUNTRY_ORIGIN VARCHAR(16777216),
	ITEM_WIDTH VARCHAR(16777216),
	TS VARCHAR(16777216),
	CREATED_DATE VARCHAR(16777216),
	ENRICHMENT_DATE VARCHAR(16777216)
);
create or replace TABLE GROCERY_IMAGE (
	PRODUCT_SIZE VARCHAR(16777216),
	URL VARCHAR(16777216),
	ITEM_ID NUMBER(38,0) NOT NULL,
	UPC NUMBER(38,0),
	ITEM VARCHAR(16777216),
	TEMPERATURE_INDICATOR VARCHAR(16777216),
	PRICE NUMBER(4,2),
	ORIGIN_STORE VARCHAR(16777216),
	ITEM_DESCRIPTION VARCHAR(16777216),
	MSRP NUMBER(4,2),
	CATEGORY VARCHAR(16777216),
	ITEM_HEATED_INDICATOR VARCHAR(16777216),
	UPDATE_DATE VARCHAR(16777216),
	COUNTRY_ORIGIN VARCHAR(16777216),
	CREATED_DATE VARCHAR(16777216),
	ENRICHMENT_DATE VARCHAR(16777216),
	TS VARCHAR(16777216),
	TPR VARCHAR(16777216),
	PRODUCT_ID NUMBER(38,0),
	UUID VARCHAR(16777216),
	ITEM_SIZE VARCHAR(16777216),
	BRAND_NAME VARCHAR(16777216)
);
create or replace ICEBERG TABLE ICYMTA (
	STOPPOINTREF STRING,
	VEHICLEREF STRING,
	PROGRESSRATE STRING,
	EXPECTEDDEPARTURETIME STRING,
	STOPPOINT STRING,
	VISITNUMBER STRING,
	DATAFRAMEREF STRING,
	STOPPOINTNAME STRING,
	SITUATIONSIMPLEREF5 STRING,
	SITUATIONSIMPLEREF3 STRING,
	BEARING STRING,
	SITUATIONSIMPLEREF4 STRING,
	SITUATIONSIMPLEREF1 STRING,
	ORIGINAIMEDDEPARTURETIME STRING,
	SITUATIONSIMPLEREF2 STRING,
	JOURNEYPATTERNREF STRING,
	RECORDEDATTIME STRING,
	OPERATORREF STRING,
	DESTINATIONNAME STRING,
	EXPECTEDARRIVALTIME STRING,
	BLOCKREF STRING,
	LINEREF STRING,
	VEHICLELOCATIONLONGITUDE STRING,
	DIRECTIONREF STRING,
	ARRIVALPROXIMITYTEXT STRING,
	DISTANCEFROMSTOP STRING,
	ESTIMATEDPASSENGERCAPACITY STRING,
	AIMEDARRIVALTIME STRING,
	PUBLISHEDLINENAME STRING,
	DATEDVEHICLEJOURNEYREF STRING,
	DATE STRING,
	MONITORED STRING,
	PROGRESSSTATUS STRING,
	DESTINATIONREF STRING,
	ESTIMATEDPASSENGERCOUNT STRING,
	VEHICLELOCATIONLATITUDE STRING,
	ORIGINREF STRING,
	NUMBEROFSTOPSAWAY STRING,
	TS STRING,
	UUID STRING
)
 EXTERNAL_VOLUME = 'TRANSCOM_TSPANNICEBERG_EXTVOL'
 CATALOG = 'SNOWFLAKE'
 BASE_LOCATION = 'mta/';
create or replace ICEBERG TABLE ICYTRANSCOME (
	TITLE STRING,
	DESCRIPTION STRING,
	PUBDATE STRING,
	POINT STRING,
	LATITUDE STRING,
	TS STRING,
	LONGITUDE STRING,
	UUID STRING NOT NULL,
	primary key (UUID)
)
 EXTERNAL_VOLUME = 'TRANSCOM_TSPANNICEBERG_EXTVOL'
 CATALOG = 'SNOWFLAKE'
 BASE_LOCATION = 'transcom/';
create or replace TABLE IRELANDLOOKUPAGENCY (
	AGENCYID VARCHAR(16777216),
	AGENCYNAME VARCHAR(16777216),
	AGENCYURL VARCHAR(16777216),
	AGENCYTIMEZONE VARCHAR(16777216)
);
create or replace TABLE IRELANDLOOKUPCALENDAR (
	SERVICEID VARCHAR(16777216),
	MONDAY VARCHAR(16777216),
	TUESDAY VARCHAR(16777216),
	WEDNESDAY VARCHAR(16777216),
	THURSDAY VARCHAR(16777216),
	FRIDAY VARCHAR(16777216),
	SATURDAY VARCHAR(16777216),
	SUNDAY VARCHAR(16777216),
	STARTDATE VARCHAR(16777216),
	ENDDATE VARCHAR(16777216)
);
create or replace TABLE IRELANDLOOKUPCALENDAR_DATES (
	SERVICEID VARCHAR(16777216),
	"date" VARCHAR(16777216),
	EXCEPTIONTYPE VARCHAR(16777216)
);
create or replace TABLE IRELANDLOOKUPFEED_INFO (
	FEEDPUBLISHERNAME VARCHAR(16777216),
	FEEDPUBLISHERURL VARCHAR(16777216),
	FEEDLANG VARCHAR(16777216),
	FEEDSTARTDATE VARCHAR(16777216),
	FEEDENDDATE VARCHAR(16777216),
	FEEDVERSION VARCHAR(16777216)
);
create or replace TABLE IRELANDLOOKUPROUTES (
	ROUTEID VARCHAR(16777216),
	AGENCYID VARCHAR(16777216),
	ROUTESHORTNAME VARCHAR(16777216),
	ROUTELONGNAME VARCHAR(16777216),
	ROUTEDESC VARCHAR(16777216),
	ROUTETYPE VARCHAR(16777216),
	ROUTEURL VARCHAR(16777216),
	ROUTECOLOR VARCHAR(16777216),
	ROUTETEXTCOLOR VARCHAR(16777216)
);
create or replace TABLE IRELANDLOOKUPSTOPS (
	STOPID VARCHAR(16777216) NOT NULL,
	STOPCODE VARCHAR(16777216),
	STOPNAME VARCHAR(16777216),
	STOPDESC VARCHAR(16777216),
	STOPLAT VARCHAR(16777216),
	STOPLON VARCHAR(16777216),
	ZONEID VARCHAR(16777216),
	STOPURL VARCHAR(16777216),
	LOCATIONTYPE VARCHAR(16777216),
	PARENTSTATION VARCHAR(16777216)
);
create or replace TABLE IRELANDLOOKUPSTOP_TIMES (
	TRIPID VARCHAR(16777216),
	ARRIVALTIME VARCHAR(16777216),
	DEPARTURETIME VARCHAR(16777216),
	STOPID VARCHAR(16777216),
	STOPSEQUENCE VARCHAR(16777216),
	STOPHEADSIGN VARCHAR(16777216),
	PICKUPTYPE VARCHAR(16777216),
	DROPOFFTYPE VARCHAR(16777216),
	TIMEPOINT VARCHAR(16777216)
);
create or replace TABLE IRELANDLOOKUPTRIPS (
	ROUTEID VARCHAR(16777216),
	SERVICEID VARCHAR(16777216),
	TRIPID VARCHAR(16777216),
	TRIPHEADSIGN VARCHAR(16777216),
	TRIPSHORTNAME VARCHAR(16777216),
	DIRECTIONID VARCHAR(16777216),
	BLOCKID VARCHAR(16777216),
	SHAPEID VARCHAR(16777216)
);
create or replace TABLE MTA (
	STOPPOINTREF VARCHAR(512),
	VEHICLEREF VARCHAR(512),
	PROGRESSRATE VARCHAR(512),
	EXPECTEDDEPARTURETIME VARCHAR(512),
	STOPPOINT VARCHAR(512),
	VISITNUMBER VARCHAR(512),
	DATAFRAMEREF VARCHAR(512),
	STOPPOINTNAME VARCHAR(512),
	SITUATIONSIMPLEREF5 VARCHAR(512),
	SITUATIONSIMPLEREF3 VARCHAR(512),
	BEARING VARCHAR(512),
	SITUATIONSIMPLEREF4 VARCHAR(512),
	SITUATIONSIMPLEREF1 VARCHAR(512),
	ORIGINAIMEDDEPARTURETIME VARCHAR(512),
	SITUATIONSIMPLEREF2 VARCHAR(512),
	JOURNEYPATTERNREF VARCHAR(512),
	RECORDEDATTIME VARCHAR(512),
	OPERATORREF VARCHAR(512),
	DESTINATIONNAME VARCHAR(512),
	EXPECTEDARRIVALTIME VARCHAR(512),
	BLOCKREF VARCHAR(512),
	LINEREF VARCHAR(512),
	VEHICLELOCATIONLONGITUDE VARCHAR(512),
	DIRECTIONREF VARCHAR(512),
	ARRIVALPROXIMITYTEXT VARCHAR(512),
	DISTANCEFROMSTOP VARCHAR(512),
	ESTIMATEDPASSENGERCAPACITY VARCHAR(512),
	AIMEDARRIVALTIME VARCHAR(512),
	PUBLISHEDLINENAME VARCHAR(512),
	DATEDVEHICLEJOURNEYREF VARCHAR(512),
	DATE VARCHAR(512),
	MONITORED VARCHAR(512),
	PROGRESSSTATUS VARCHAR(512),
	DESTINATIONREF VARCHAR(512),
	ESTIMATEDPASSENGERCOUNT VARCHAR(512),
	VEHICLELOCATIONLATITUDE VARCHAR(512),
	ORIGINREF VARCHAR(512),
	NUMBEROFSTOPSAWAY VARCHAR(512),
	TS VARCHAR(512),
	UUID VARCHAR(512)
);
create or replace TABLE PLANES (
	ICAO24 VARCHAR(16777216),
	FIRSTSEEN VARCHAR(16777216),
	ESTDEPARTUREAIRPORT VARCHAR(16777216),
	LASTSEEN VARCHAR(16777216),
	ESTARRIVALAIRPORT VARCHAR(16777216),
	CALLSIGN VARCHAR(16777216),
	ESTDEPARTUREAIRPORTHORIZDISTANCE VARCHAR(16777216),
	ESTDEPARTUREAIRPORTVERTDISTANCE VARCHAR(16777216),
	ESTARRIVALAIRPORTHORIZDISTANCE VARCHAR(16777216),
	ESTARRIVALAIRPORTVERTDISTANCE VARCHAR(16777216),
	DEPARTUREAIRPORTCANDIDATESCOUNT VARCHAR(16777216),
	ARRIVALAIRPORTCANDIDATESCOUNT VARCHAR(16777216),
	TS VARCHAR(16777216),
	UUID VARCHAR(16777216)
);
create or replace TABLE RAWDOCS (
	TITLE VARCHAR(16777216),
	DESCRIPTION VARCHAR(16777216),
	PUBDATE VARCHAR(16777216),
	DOCID VARCHAR(16777216),
	DOCVEC VARIANT
);
create or replace TABLE RAWDOCUMENTS (
	VARIANT_COL VARIANT
);
create or replace ICEBERG TABLE SERVICEALERTS (
	ROUTEID4 STRING,
	ROUTEID5 STRING,
	DESCRIPTIONLANG STRING,
	CAUSE STRING,
	STOPID STRING,
	ALERTLANG STRING,
	ALERTTEXT STRING,
	ROUTEID STRING,
	EFFECT STRING,
	STOPID5 STRING,
	DESCRIPTIONTEXT STRING,
	STOPID4 STRING,
	ACTIVEPERIODEND STRING,
	STOPID3 STRING,
	STOPID2 STRING,
	ROUTEID2 STRING,
	ROUTEID3 STRING,
	ACTIVEPERIODSTART STRING,
	TS STRING,
	UUID STRING
)
 EXTERNAL_VOLUME = 'TRANSCOM_TSPANNICEBERG_EXTVOL'
 CATALOG = 'SNOWFLAKE'
 BASE_LOCATION = 'subwayalerts/';
create or replace TABLE SLACKMESSAGES (
	MESSAGEREALNAME VARCHAR(16777216),
	MESSAGETYPE VARCHAR(16777216),
	INPUTS VARCHAR(16777216),
	MESSAGEID VARCHAR(16777216),
	UUID VARCHAR(16777216) NOT NULL,
	MESSAGEUSERNAME VARCHAR(16777216),
	MESSAGETIMESTAMP VARCHAR(16777216),
	MESSAGEPERMALINKPUBLIC VARCHAR(16777216),
	FILENAME VARCHAR(16777216),
	MESSAGECHANNEL VARCHAR(16777216),
	MESSAGETEXT VARCHAR(16777216),
	MESSAGEUSERTZ VARCHAR(16777216),
	MESSAGESUBTYPE VARCHAR(16777216)
);
create or replace TABLE STOCK (
	COUNTRY VARCHAR(10),
	CURRENCY VARCHAR(10),
	ESTIMATECURRENCY VARCHAR(10),
	EXCHANGE VARCHAR(250),
	FINNHUBINDUSTRY VARCHAR(250),
	IPO VARCHAR(250),
	LOGO VARCHAR(250),
	MARKETCAPITALIZATION NUMBER(20,6),
	NAME VARCHAR(9),
	PHONE VARCHAR(250),
	SHAREOUTSTANDING NUMBER(20,2),
	TICKER VARCHAR(20),
	WEBURL VARCHAR(250),
	DESCRIPTION VARCHAR(250),
	DISPLAYSYMBOL VARCHAR(250),
	SYMBOL VARCHAR(250),
	SYMBOLTYPE VARCHAR(250)
);
create or replace TABLE STOCKVALUES (
	UUID VARCHAR(250),
	LASTPRICE FLOAT,
	STOCKVOLUME FLOAT,
	SYMBOL VARCHAR(250),
	TS VARCHAR(250),
	TRADECONDITIONS VARCHAR(250)
);
create or replace ICEBERG TABLE SUBWAY (
	STOPSEQUENCE STRING,
	ARRIVALTIME STRING,
	STOPID STRING,
	TRIPID STRING,
	TRIPSTARTDATE STRING,
	DEPARTURETIME STRING,
	TRIPROUTEID STRING,
	TS STRING,
	UUID STRING
)
 EXTERNAL_VOLUME = 'TRANSCOM_TSPANNICEBERG_EXTVOL'
 CATALOG = 'SNOWFLAKE'
 BASE_LOCATION = 'subway/';
create or replace TABLE TEST (
	ID VARCHAR(16777216),
	DETAILS VARCHAR(16777216)
);
create or replace TABLE TRADECONDITIONS (
	TCCODE VARCHAR(16777216),
	TCNAME VARCHAR(16777216),
	TCUPDATELAST VARCHAR(16777216),
	TCUPDATEHIGHLOW VARCHAR(16777216),
	MARKETCENTERUUPDATELAST VARCHAR(16777216),
	MARKETCENTERUPDATEHIGHLOW VARCHAR(16777216),
	UPDATEVOLUME VARCHAR(16777216),
	NOTE VARCHAR(16777216)
);
create or replace TABLE TRANSCOM (
	TITLE VARCHAR(16777216),
	DESCRIPTION VARCHAR(16777216),
	PUBDATE VARCHAR(16777216),
	POINT VARCHAR(16777216),
	LATITUDE VARCHAR(16777216),
	TS VARCHAR(16777216),
	LONGITUDE VARCHAR(16777216),
	UUID VARCHAR(16777216) NOT NULL,
	primary key (UUID)
);
create or replace TABLE TRANSCOMRAW (
	TITLE VARCHAR(16777216),
	DESCRIPTION VARCHAR(16777216),
	PUBDATE VARCHAR(16777216),
	POINT VARCHAR(16777216),
	LATITUDE VARCHAR(16777216),
	TS VARCHAR(16777216),
	LONGITUDE VARCHAR(16777216),
	UUID VARCHAR(16777216) NOT NULL
);
create or replace TABLE TRUCK (
	TRUCK_ID NUMBER(38,0),
	MENU_TYPE_ID NUMBER(38,0),
	PRIMARY_CITY VARCHAR(16777216),
	REGION VARCHAR(16777216),
	ISO_REGION VARCHAR(16777216),
	COUNTRY VARCHAR(16777216),
	ISO_COUNTRY_CODE VARCHAR(16777216),
	FRANCHISE_FLAG NUMBER(38,0),
	YEAR NUMBER(38,0),
	MAKE VARCHAR(16777216),
	MODEL VARCHAR(16777216),
	EV_FLAG NUMBER(38,0),
	FRANCHISE_ID NUMBER(38,0),
	TRUCK_OPENING_DATE DATE
);
create or replace TABLE TRUCKTABLECLONE (
	TRUCK_ID NUMBER(38,0),
	MENU_TYPE_ID NUMBER(38,0),
	PRIMARY_CITY VARCHAR(16777216),
	REGION VARCHAR(16777216),
	ISO_REGION VARCHAR(16777216),
	COUNTRY VARCHAR(16777216),
	ISO_COUNTRY_CODE VARCHAR(16777216),
	FRANCHISE_FLAG NUMBER(38,0),
	YEAR NUMBER(38,0),
	MAKE VARCHAR(16777216),
	MODEL VARCHAR(16777216),
	EV_FLAG NUMBER(38,0),
	FRANCHISE_ID NUMBER(38,0),
	TRUCK_OPENING_DATE DATE
);
create or replace ICEBERG TABLE VEHICLEPOSITIONS (
	ROUTE_ID STRING,
	BEARING STRING,
	DIRECTIONID STRING,
	LATITUDE STRING,
	TRIPID STRING,
	VEHICLELABEL STRING,
	VEHICLEID STRING,
	STARTDATE STRING,
	UUID STRING,
	SPEED STRING,
	LONGITUDE STRING,
	TIMESTAMP STRING,
	TS STRING
)
 EXTERNAL_VOLUME = 'TRANSCOM_TSPANNICEBERG_EXTVOL'
 CATALOG = 'SNOWFLAKE'
 BASE_LOCATION = 'subwayvp/';
create or replace TABLE ZIPCODES (
	STATE_FIPS VARCHAR(16777216),
	STATE VARCHAR(16777216),
	STATE_ABBR VARCHAR(16777216),
	ZIPCODE VARCHAR(16777216),
	COUNTY VARCHAR(16777216),
	CITY VARCHAR(16777216)
);
create or replace secure view DOCS_PRESIGNED_V(
	PRESIGNED_URL
) as
SELECT GET_PRESIGNED_URL(@DOCUMENTS, relative_path, 6000) AS presigned_url
FROM DIRECTORY(@DOCUMENTS);
create or replace secure view DOCS_SCOPED_V(
	SCOPED_FILE_URL
) as
SELECT BUILD_SCOPED_FILE_URL(@DOCUMENTS, relative_path) AS scoped_file_url
FROM DIRECTORY(@DOCUMENTS);
create or replace view VW_MTANEARBY(
	BUS,
	DESTINATIONNAME,
	EXPECTEDARRIVALTIME,
	EXPECTEDDEPARTURETIME,
	STOPPOINTNAME,
	BEARING,
	DISTANCE,
	DISTANCEFROMSTOP,
	INCIDENTDESCRIPTION,
	RECORDEDATTIME,
	ESTIMATEDPASSENGERCOUNT,
	ESTIMATEDPASSENGERCAPACITY,
	ARRIVALPROXIMITYTEXT,
	NUMBEROFSTOPSAWAY,
	TS
) as
    select VEHICLEREF as bus, destinationname, expectedarrivaltime, EXPECTEDDEPARTURETIME, stoppointname, bearing,HAVERSINE( VEHICLELOCATIONLATITUDE, VEHICLELOCATIONLONGITUDE, 40.3209,	-74.4208 ) as distance, 
      distancefromstop,SITUATIONSIMPLEREF1 as IncidentDescription, recordedattime, ESTIMATEDPASSENGERCOUNT, ESTIMATEDPASSENGERCAPACITY, arrivalproximitytext,NUMBEROFSTOPSAWAY, TS 
  from icymta
  where DISTANCEFROMSTOP > 0
  order by distance desc, recordedattime desc ;
CREATE OR REPLACE FUNCTION "BOOKS_CHUNK"("DESCRIPTION" VARCHAR, "TITLE" VARCHAR, "AUTHORS" VARCHAR, "CATEGORY" VARCHAR, "PUBLISHER" VARCHAR)
RETURNS TABLE ("CHUNK" VARCHAR, "TITLE" VARCHAR, "AUTHORS" VARCHAR, "CATEGORY" VARCHAR, "PUBLISHER" VARCHAR)
LANGUAGE PYTHON
RUNTIME_VERSION = '3.9'
PACKAGES = ('snowflake-snowpark-python','langchain')
HANDLER = 'text_chunker'
AS '
from langchain.text_splitter import RecursiveCharacterTextSplitter
import copy
from typing import Optional

class text_chunker:

    def process(self, description: Optional[str], title: str, authors: str, category: str, publisher: str):
        if description == None:
            description = "" # handle null values

        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size = 2000,
            chunk_overlap  = 300,
            length_function = len
        )
        chunks = text_splitter.split_text(description)
        for chunk in chunks:
            yield (title + "\\n" + authors + "\\n" + chunk, title, authors, category, publisher) # always chunk with title
';
CREATE OR REPLACE PROCEDURE "INCREASE_PRICES"()
RETURNS BOOLEAN
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
  max_ts TIMESTAMP;
  cutoff_ts TIMESTAMP;
BEGIN
UPDATE menu
  SET SALE_PRICE_USD = menu.SALE_PRICE_USD + 0;
END;
';
CREATE OR REPLACE PROCEDURE "RETURNSTOCKSYMBOLS"()
RETURNS TABLE ("STOCK" VARCHAR)
LANGUAGE SQL
EXECUTE AS OWNER
AS 'DECLARE
  res RESULTSET;
BEGIN
  res := (SELECT ''{"type":"subscribe","symbol":"'' || symbol || ''"} '' as stock FROM STOCK);
  RETURN TABLE(res);
END';
CREATE OR REPLACE PROCEDURE "RETURN_MTA_NEARBY"("YOURLATITUDE" VARCHAR, "YOURLONGITUDE" VARCHAR)
RETURNS TABLE ("BUS" VARCHAR, "destinationname" VARCHAR, "EXPECTEDARRIVALTIME" VARCHAR, "EXPECTEDDEPARTURETIME" VARCHAR, "STOPPOINTNAME" VARCHAR, "BEARING" VARCHAR, "DISTANCE" FLOAT, "DISTANCEINMILES" FLOAT, "DISTANCEFROMSTOP" VARCHAR, "INCIDENTDESCRIPTION" VARCHAR, "RECORDEDATTIME" VARCHAR, "ESTIMATEDPASSENGERCOUNT" VARCHAR, "ESTIMATEDPASSENGERCAPACITY" VARCHAR, "ARRIVALPROXIMITYTEXT" VARCHAR, "NUMBEROFSTOPSAWAY" VARCHAR, "TS" VARCHAR)
LANGUAGE SQL
EXECUTE AS OWNER
AS 'DECLARE
  res RESULTSET;
BEGIN
  res := ( SELECT VEHICLEREF as bus, destinationname, 
         expectedarrivaltime,
         EXPECTEDDEPARTURETIME, stoppointname, bearing,HAVERSINE( VEHICLELOCATIONLATITUDE, VEHICLELOCATIONLONGITUDE, :YOURLATITUDE,	
         :YOURLONGITUDE ) as distance, 
         (ST_DISTANCE(ST_MAKEPOINT(VEHICLELOCATIONLATITUDE,VEHICLELOCATIONLONGITUDE), ST_MAKEPOINT(:YOURLATITUDE,:YOURLONGITUDE))/1609) as distanceinmiles,
         distancefromstop,SITUATIONSIMPLEREF1 as IncidentDescription, 
      recordedattime, ESTIMATEDPASSENGERCOUNT, 
      ESTIMATEDPASSENGERCAPACITY, 
      arrivalproximitytext,
      NUMBEROFSTOPSAWAY, 
      TS 
  FROM icymta
  WHERE DISTANCEFROMSTOP > 0
  ORDER BY distance ASC);
  RETURN TABLE(res);
END';
create or replace authentication policy MFA_ENFORCEMENT_POLICY AUTHENTICATION_METHODS=(ALL) CLIENT_TYPES=(ALL) SECURITY_INTEGRATIONS=(ALL) MFA_ENROLLMENT=REQUIRED MFA_AUTHENTICATION_METHODS=(SAML,PASSWORD) ;
create or replace streamlit BGAWOW7EUGUCSFZY
	root_location='@DEMO.DEMO."BGAWOW7EUGUCSFZY (Stage)"
	main_file='/streamlit_app.py'
	query_warehouse='COMPUTE_WH'
	comment='{"lastUpdatedUser":"107919488401","lastUpdatedTime":1736194538573}'
	title='displayData';
create or replace streamlit FT_LLBZF8WS2O1LP
	root_location='@DEMO.DEMO."FT_LLBZF8WS2O1LP (Stage)"
	main_file='/streamlit_app.py'
	query_warehouse='COMPUTE_WH'
	comment='{"lastUpdatedUser":"107919488401","lastUpdatedTime":1740521897744}'
	title='cortexsearch';
create or replace schema PUBLIC;

create or replace TABLE BIKE_RIDERS (
	TIMESTAMP VARCHAR(16777216),
	NORTHBOUND NUMBER(38,0),
	SOUTHBOUND NUMBER(38,0)
);
create or replace TABLE EMP_BASIC (
	FIRST_NAME VARCHAR(16777216),
	LAST_NAME VARCHAR(16777216),
	EMAIL VARCHAR(16777216),
	STREETADDRESS VARCHAR(16777216),
	CITY VARCHAR(16777216),
	START_DATE DATE
);
create or replace TABLE TRANSCOM (
	TITLE VARCHAR(16777216),
	DESCRIPTION VARCHAR(16777216),
	PUBDATE VARCHAR(16777216),
	POINT VARCHAR(16777216),
	LATITUDE VARCHAR(16777216),
	TS VARCHAR(16777216),
	LONGITUDE VARCHAR(16777216),
	UUID VARCHAR(16777216) NOT NULL,
	primary key (UUID)
);
CREATE OR REPLACE FUNCTION "FETCH_ENDPOINT"("URL" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE PYTHON
RUNTIME_VERSION = '3.8'
PACKAGES = ('requests')
HANDLER = 'fetch_and_transform_data'
EXTERNAL_ACCESS_INTEGRATIONS = (SEATTLE_OPEN_DATA_INTEGRATION)
AS '
import requests
import _snowflake
session = requests.Session()
def fetch_and_transform_data(url):
    response = requests.get(url)
    data = response.json()
    # Perform data transformation here
    return data
';
create or replace schema RAW_POS;

create or replace TABLE MENU (
	MENU_ID NUMBER(19,0),
	MENU_TYPE_ID NUMBER(38,0),
	MENU_TYPE VARCHAR(16777216),
	TRUCK_BRAND_NAME VARCHAR(16777216),
	MENU_ITEM_ID NUMBER(38,0),
	MENU_ITEM_NAME VARCHAR(16777216),
	ITEM_CATEGORY VARCHAR(16777216),
	ITEM_SUBCATEGORY VARCHAR(16777216),
	COST_OF_GOODS_USD NUMBER(38,4),
	SALE_PRICE_USD NUMBER(38,4),
	MENU_ITEM_HEALTH_METRICS_OBJ VARIANT
);
CREATE OR REPLACE PROCEDURE "INCREASE_PRICES"()
RETURNS BOOLEAN
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
UPDATE menu
  SET SALE_PRICE_USD = menu.SALE_PRICE_USD + 0;
END;
';
CREATE OR REPLACE FUNCTION "MAX_MENU_PRICE"()
RETURNS NUMBER(5,2)
LANGUAGE SQL
AS '
    SELECT MAX(SALE_PRICE_USD) FROM MENU
  ';
CREATE OR REPLACE FUNCTION "MENU_PRICES_BELOW"("PRICE_CEILING" NUMBER(38,0))
RETURNS TABLE ("ITEM" VARCHAR(16777216), "PRICE" NUMBER(38,0))
LANGUAGE SQL
AS '
SELECT MENU_ITEM_NAME, SALE_PRICE_USD
    FROM MENU
    WHERE SALE_PRICE_USD < price_ceiling
    ORDER BY 2 DESC
';
CREATE OR REPLACE FUNCTION "MIN_MENU_PRICE"()
RETURNS NUMBER(5,2)
LANGUAGE SQL
AS '
SELECT MIN(SALE_PRICE_USD) FROM MENU
  ';
CREATE OR REPLACE PROCEDURE "RETURNMENUSAMPLE"()
RETURNS TABLE ()
LANGUAGE PYTHON
RUNTIME_VERSION = '3.11'
PACKAGES = ('snowflake-snowpark-python')
HANDLER = 'main'
EXECUTE AS OWNER
AS '# import what you need
import snowflake.snowpark as snowpark

# import col
#from snowflake.snowpark.functions import col

# make sure to define main when you’re working in a Python worksheet
def main(session: snowpark.Session): 

    # load your table as a dataframe
    # df_table = session.table("MENU")

    df_table2 =  session.sql("SELECT MENU_TYPE, Menu_item_name FROM MENU LIMIT 20")
    # execute the operations. (Remember, Snowpark DataFrames are evaluated lazily.)
    #df_table.show()

    # return your table
    return df_table2


# ADDITIONAL IMPORTANT CODE SNIPPETS BELOW!

# save your dataframe as a table!
#df_table.write.save_as_table("TEST_DATABASE.TEST_SCHEMA.FREEZING_POINT_ITEMS", mode="append")

# load data using a query through session.sql instead of through session.table
    #df_table2 = session.sql("SELECT * FROM TASTY_BYTES.RAW_POS.MENU LIMIT 5")

# you can run other commands through session.sql – even things like CREATE
    #session.sql("""
    #CREATE OR REPLACE TABLE TEST_DATABASE.TEST_SCHEMA.EMPTY_TABLE (
    #col1 varchar, 
    #col2 varchar
    #)""").collect()

# filter rows
    #df_table = df_table.filter(col("TRUCK_BRAND_NAME") == "Freezing Point")

# select columns
    #df_table = df_table.select(col("MENU_ITEM_NAME"), col("ITEM_CATEGORY"))

# filter and select at the same time (chaining)
    #df_table = df_table.filter(
    #    col("TRUCK_BRAND_NAME") == "Freezing Point"
    #).select(
    #    col("MENU_ITEM_NAME"), 
    #    col("ITEM_CATEGORY")
    #)
';
create or replace schema TEST_SCHEMA;
